#!/usr/bin/python -tt
from revChatGPT.V1 import Chatbot
# from revChatGPT.V1 import global_flag
import sys
# import asyncio
import socket
import io
import re
import time
import random
# from requests.adapters import request_flag

# async def long_running_function():
#    # simulate a long-running task
#    await asyncio.sleep(30)

# async def callback(chatbot,text):
#    return chatbot.ask(text,)


# chatbot = Chatbot(config)
def main():
    #    print("===start====\n")
    HOST = 'localhost'
    get_conversation_id = ""
    PORT = 32349
#    PORT = 12346
    #
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    server_socket.bind((HOST, PORT))

    # Listen for incoming connections
    server_socket.listen(1)
    # print("Server listening on {}:{}".format(HOST, PORT))

    # print("Chatbot: ")
    user = "User: "
    prev_text = "Answer: "
    # conversation = []
    conversation = ""
    loop = 1
    conversation_stack = []
    conversation_stack.append("13d7ccad-9b8c-4f50-88e0-ac8066ace271")
    tmp = ""
    index = 0
#    res = 0

    while True:
        #        print("enter loop message")
        # if loop less than 2, then get conversation id
        if loop > 1000:
            config["conversation_id"] = random.choice(conversation_stack)
#        else:
#            #            config["conversation_id"] = conversation_stack[0]
#            # delete conversation id from config
#            config.pop("conversation_id", None)
#            config["conversation_id"] = ""
        config["conversation_id"] = random.choice(sessions)
#        config["conversation_id"] = random.choice(conversation_stack)
        chatbot = Chatbot(config)
        client_socket, client_address = server_socket.accept()
    #    print("Connected to client:", client_address)

        while (True):
            #            print("bind port\n")
            receved = client_socket.recv(1024).decode('utf-8')
            if receved:
                print(user+receved)
#                print(receved)
                # No more data from client, break the loop
                break
#        text = input("You: ")
#        print("bind port fin\n")
# user_name, msg = text.decode().split(',')
# conbine user_name and msg
# n_text = user_name + ": " + msg + "\n"
# print(n_text)
        text = receved
        print("Answer: ", end="")
        for data in chatbot.ask(
            text,
        ):
            #            if(request_flag == False):
            #                break
            # print index
            #            print(f"===rloop {index} ==== ", end="")
            if (index == 2024):
                break
            if (data == 0):
                break
#            if(global_flag == False):
#                print("===== enter global sleep======\n")
#                time.sleep(600)
#                break
            index = index + 1
            message = data["message"][len(prev_text):]
    #        long_string = " ".join(message)
    #        conversation.append(message)
#            conversation = conversation + message

    #        output_buffer = io.StringIO()
    #        # Redirect the standard output to the buffer
    #        sys.stdout = output_buffer

            print(message, end="", flush=True)
    #        print(message)

    #        printed_output = output_buffer.getvalue()
    #        # Reset the standard output to the original value
    #        sys.stdout = sys.__stdout__
            prev_text = data["message"]
    #        print(prev_text)
    #    conversation = re.sub(r'(?<! ) ', '', conversation)
    #    conversation = re.sub(r' +', ' ', conversation)
    #    conversation = conversation.replace(" ", "")
        get_conversation_id = data["conversation_id"]
     #    print(get_conversation_id)
        # save get_conversation_id to stack in size 20
        if (len(conversation_stack) < 10):
            conversation_stack.append(get_conversation_id)
        # if loop 20 times, empty stack
#        if (loop % 200 == 0):
#            tmp = conversation_stack.pop(0)
#            conversation_stack = []
#            conversation_stack = [tmp]

        client_socket.sendall("finifsh".encode())
#        client_socket.close()
        index = 0
        print("\n")
        print("#######################\n")
        delay = random.randint(3, 6)
        time.sleep(delay)  # Sleep for 3 seconds
#    #    time.sleep(3)  # Sleep for 3 seconds
#        loop = loop + 1
#        break

#    elif(i==119):
#        client_socket.close()
#        break

    #    file = open("save.txt", "a")
    #    file.write("#######################\n")
    #    file.write(f"**USER**: {text}\n")
    #    file.write(f"**BOT**: {conversation}\n")
    #    file.close()
#    else:
#    #    print("====== failed ======\n")
#        continue
#        if(i==119):
#            break
if __name__ == "__main__":
    main()
